From 7b494ed081c48fde1d6856d34f488438f7e9f4c0 Mon Sep 17 00:00:00 2001
From: Martijn van de Rijdt <martijn@enketo.org>
Date: Mon, 14 Sep 2015 15:00:51 -0600
Subject: [PATCH] start with ticks (+2 squashed commits) Squashed commits:
 [46aa6aa] fixes for distresspicker after changes in slider library [3141796]
 basic scaffolding added

---
 package.json                                    |   2 +-
 src/js/widgets.js                               |   3 +-
 src/sass/core/_widgets.scss                     |   1 +
 src/widget/analog-scale/analog-scalepicker.js   | 155 ++++++++++++++++++++++++
 src/widget/analog-scale/analog-scalepicker.scss | 107 ++++++++++++++++
 src/widget/distress/distresspicker.js           |  11 +-
 src/widget/distress/distresspicker.scss         |   6 +-
 7 files changed, 275 insertions(+), 10 deletions(-)
 create mode 100644 src/widget/analog-scale/analog-scalepicker.js
 create mode 100644 src/widget/analog-scale/analog-scalepicker.scss

diff --git a/package.json b/package.json
index 483ca94..61cbcd3 100644
--- a/package.json
+++ b/package.json
@@ -47,7 +47,7 @@
     },
     "dependencies": {
         "bootstrap-datepicker": "1.4.x",
-        "bootstrap-slider-basic": "3.0.x",
+        "bootstrap-slider-basic": "3.1.0",
         "bootstrap-timepicker": "0.2.x",
         "enketo-xpathjs": "1.2.x",
         "jquery": "2.1.x",
diff --git a/src/js/widgets.js b/src/js/widgets.js
index a916e6d..337a803 100644
--- a/src/js/widgets.js
+++ b/src/js/widgets.js
@@ -19,7 +19,8 @@ define( function( require, exports, module ) {
         require( '../widget/file/filepicker' ),
         require( '../widget/select-likert/likertitem' ),
         require( '../widget/distress/distresspicker' ),
-        require( '../widget/horizontal-choices/horizontalchoices' )
+        require( '../widget/horizontal-choices/horizontalchoices' ),
+        require( '../widget/analog-scale/analog-scalepicker' ),
     ];
 
     module.exports = widgets;
diff --git a/src/sass/core/_widgets.scss b/src/sass/core/_widgets.scss
index b8c8505..c49ff39 100644
--- a/src/sass/core/_widgets.scss
+++ b/src/sass/core/_widgets.scss
@@ -12,3 +12,4 @@
 @import "../../widget/select-likert/likertitem.scss";
 @import "../../widget/distress/distresspicker.scss";
 @import "../../widget/horizontal-choices/horizontalchoices.scss";
+@import "../../widget/analog-scale/analog-scalepicker.scss";
diff --git a/src/widget/analog-scale/analog-scalepicker.js b/src/widget/analog-scale/analog-scalepicker.js
new file mode 100644
index 0000000..07c6bec
--- /dev/null
+++ b/src/widget/analog-scale/analog-scalepicker.js
@@ -0,0 +1,155 @@
+if ( typeof exports === 'object' && typeof exports.nodeName !== 'string' && typeof define !== 'function' ) {
+    var define = function( factory ) {
+        factory( require, exports, module );
+    };
+}
+
+define( function( require, exports, module ) {
+    'use strict';
+    var Widget = require( '../../js/Widget' );
+    var $ = require( 'jquery' );
+    var pluginName = 'analogscalepicker';
+
+    require( 'bootstrap-slider-basic' );
+
+    /**
+     * Creates an analog scale picker
+     *
+     * @constructor
+     * @param {Element} element Element to apply widget to.
+     * @param {(boolean|{touch: boolean})} options options
+     * @param {*=} event     event
+     */
+    function Analogscalepicker( element, options, event ) {
+        this.namespace = pluginName;
+        Widget.call( this, element, options );
+        this._init();
+    }
+
+    // copy the prototype functions from the Widget super class
+    Analogscalepicker.prototype = Object.create( Widget.prototype );
+
+    // ensure the constructor is the new one
+    Analogscalepicker.prototype.constructor = Analogscalepicker;
+
+    /**
+     * Initialize
+     */
+    Analogscalepicker.prototype._init = function() {
+        var $question = $( this.element ).closest( '.question' );
+        var value = Number( this.element.value ) || -1;
+
+        this.orientation = $question.hasClass( 'or-appearance-horizontal' ) ? 'horizontal' : 'vertical';
+        this.ticks = !$question.hasClass( 'or-appearance-no-ticks' );
+
+        $( this.element ).slider( {
+            reversed: true,
+            min: -1,
+            max: 100,
+            orientation: this.orientation,
+            step: 1,
+            value: value
+        } );
+        this.$widget = $( this.element ).next( '.widget' );
+        this.$slider = this.$widget.find( '.slider' );
+        this._renderLabels();
+        //this._addValueBox();
+        this._renderScale();
+        this._setChangeHandler();
+    };
+
+    /** 
+     * (re-)Renders the widget labels based on the current content of .question-label.active
+     */
+    Analogscalepicker.prototype._renderLabels = function() {
+        var $labelEl = $( this.element ).siblings( '.question-label.active' );
+        var labels = $labelEl.html().split( /\|/ ).map( function( label ) {
+            return label.trim();
+        } );
+
+        console.debug( 'label', labels ); // DEBUG
+
+        this.$mainLabel = this.$mainLabel || $( '<span class="widget question-label active" />' ).insertAfter( $labelEl );
+        this.$mainLabel.empty().append( labels[ 0 ] );
+
+        this.$maxLabel = this.$maxLabel || $( '<div class="max-label" />' ).prependTo( this.$widget );
+        this.$maxLabel.empty().append( labels[ 1 ] );
+
+        this.$minLabel = this.$minLabel || $( '<div class="min-label" />' ).appendTo( this.$widget );
+        this.$minLabel.empty().append( labels[ 2 ] );
+
+        if ( labels[ 3 ] ) {
+            this.$showValue = this.$showValue || $( '<div class="show-value" />' ).insertBefore( this.element );
+            this.$showValue.empty().append( labels[ 3 ] + '<span class="value">' + this.element.value + '</span>' );
+        } else if ( this.$showValue ) {
+            this.$showValue.remove();
+            this.$showValue = undefined;
+        }
+    };
+
+    Analogscalepicker.prototype._renderValueBox = function() {
+        this.$widget.append(
+            '<div class="value-box"></div>'
+        );
+    };
+
+    Analogscalepicker.prototype._renderScale = function() {
+        var $scale = $( '<div class="scale"></div>' );
+        for ( var i = 100; i >= 0; i -= 10 ) {
+            $scale.append( '<div class="number"><div class="value">' + i + '</div><div class="ticks"></div></div>' );
+        }
+        this.$slider.prepend( $scale );
+    };
+
+    /**
+     * Set delegated event handlers
+     */
+    Analogscalepicker.prototype._setChangeHandler = function() {
+        var that = this;
+        $( this.element ).on( 'slideStop.' + this.namespace, function( slideEvt ) {
+            // set to empty if value = -1
+            if ( Number( this.value ) === -1 ) {
+                this.value = '';
+            }
+            console.debug( 'updating value', this.value ); //DEBUG
+            that.$showValue.find( '.value' ).text( this.value );
+            $( this ).trigger( 'change' );
+        } );
+    };
+
+    Analogscalepicker.prototype.disable = function() {
+        $( this.element )
+            .slider( 'disable' )
+            .slider( 'setValue', this.element.value );
+    };
+
+    Analogscalepicker.prototype.enable = function() {
+        $( this.element )
+            .slider( 'enable' );
+    };
+
+    Analogscalepicker.prototype.update = function() {
+        this._renderLabels();
+    };
+
+    $.fn[ pluginName ] = function( options, event ) {
+        return this.each( function() {
+            var $this = $( this ),
+                data = $( this ).data( pluginName );
+
+            options = options || {};
+
+            if ( !data && typeof options === 'object' ) {
+                $this.data( pluginName, ( data = new Analogscalepicker( this, options, event ) ) );
+            } else if ( data && typeof options === 'string' ) {
+                //pass the context, used for destroy() as this method is called on a cloned widget
+                data[ options ]( this );
+            }
+        } );
+    };
+
+    module.exports = {
+        'name': pluginName,
+        'selector': '.or-appearance-analog-scale input[data-type-xml="int"]'
+    };
+} );
diff --git a/src/widget/analog-scale/analog-scalepicker.scss b/src/widget/analog-scale/analog-scalepicker.scss
new file mode 100644
index 0000000..58a6ba8
--- /dev/null
+++ b/src/widget/analog-scale/analog-scalepicker.scss
@@ -0,0 +1,107 @@
+$tick-color: black;
+$border: 1px solid $tick-color;
+$handle-color: red;
+$width: 150px;
+
+.or-appearance-analog-scale {
+    min-height: 400px;
+    // using a dirty trick, knowing that only only question-labels with a lang attribute
+    // are switched when the language changes
+    .question-label.active[lang] {
+        display: none;
+    }
+    .slider-vertical {
+        width: $width;
+    }
+    .slider-vertical .slider {
+        min-height: 600px;
+        //width: $width;
+        margin: 10px 0;
+        left: 50%;
+    }
+    .slider-disabled {
+        opacity: 0.5;
+    }
+    .slider-vertical .slider-track {
+        //top: 18px;
+        //border-bottom-left-radius: 0;
+        //border-bottom-right-radius: 0;
+        border-bottom: none;
+        background: none;
+        border-radius: 0;
+        box-shadow: none;
+        //background: $handle-color;
+        z-index: 10;
+    }
+    .slider-handle {
+        background: $handle-color;
+    }
+    .slider-selection {
+        background: transparent;
+        border-radius: 0;
+    }
+    .scale {
+        @include font-normal;
+        height: 100%;
+        position: absolute;
+        //top: -1px;
+        left: -5px;
+        font-size: 12px;
+        .number {
+            line-height: 16px;
+            height: 9.09%;
+            width: 30px;
+            border-bottom: $border;
+            &:last-child {
+                //display: none;
+           
+            }
+        }
+        .ticks {
+            width: 50%;
+            height: 100%;
+            margin-left: 25%;
+            background-image: linear-gradient(0deg, $tick-color 1px, transparent 0px);
+            background-repeat: repeat;
+            background-size: 100% 10%;
+        }
+        .value {
+            position: relative;
+            top: 50%;
+            left: -25px;
+            width: 20px;
+            text-align: center;
+        }
+    }
+    .max-label,
+    .min-label {
+        text-align: center;
+        //max-width: $width
+   
+    }
+    .show-value {
+        background-color: black;
+        text-align: center;
+        color: white;
+        width: 170px;
+        padding: 10px 35px;
+        margin: 10px;
+        @extend h5;
+        @include font-normal;
+        .value {
+            margin-top: 3px;
+            display: block;
+            min-width: 1px;
+            min-height: 23px;
+            @extend h4;
+        }
+    }
+}
+
+// corrections for rtl display
+.or[dir="rtl"] {
+    .slider-vertical .slider-handle {
+        margin-right: -4.5px;
+        margin-left: auto;
+    }
+}
diff --git a/src/widget/distress/distresspicker.js b/src/widget/distress/distresspicker.js
index 67db917..0f1d20f 100644
--- a/src/widget/distress/distresspicker.js
+++ b/src/widget/distress/distresspicker.js
@@ -28,7 +28,7 @@ define( function( require, exports, module ) {
     var pluginName = 'distresspicker';
 
     /**
-     * Enhances radio buttons
+     * Creates a distress picker.
      *
      * @constructor
      * @param {Element} element Element to apply widget to.
@@ -63,14 +63,15 @@ define( function( require, exports, module ) {
             step: step,
             value: value
         } );
-        this.$widget = $( this.element ).next( '.slider' );
+        this.$widget = $( this.element ).next( '.widget' );
+        this.$slider = this.$widget.find( '.slider' );
         this._addBulb();
         this._addScale();
         this._setChangeHandler();
     };
 
     Distresspicker.prototype._addBulb = function() {
-        this.$widget.append(
+        this.$slider.append(
             '<div class="bulb"><div class="inner"></div></div>'
         );
     };
@@ -80,7 +81,7 @@ define( function( require, exports, module ) {
         for ( var i = 10; i >= -1; i-- ) {
             $scale.append( '<div class="number"><div class="value">' + i + '</div></div>' );
         }
-        this.$widget.prepend( $scale );
+        this.$slider.prepend( $scale );
     };
 
     /**
@@ -89,7 +90,7 @@ define( function( require, exports, module ) {
     Distresspicker.prototype._setChangeHandler = function() {
         $( this.element ).on( 'slideStop.' + this.namespace, function( slideEvt ) {
             // set to empty if value = -1
-            if ( this.value === -1 ) {
+            if ( Number( this.value ) === -1 ) {
                 this.value = '';
             }
             $( this ).trigger( 'change' );
diff --git a/src/widget/distress/distresspicker.scss b/src/widget/distress/distresspicker.scss
index 268c0fa..6365691 100644
--- a/src/widget/distress/distresspicker.scss
+++ b/src/widget/distress/distresspicker.scss
@@ -7,7 +7,7 @@ $green: rgb(60, 182, 67);
 
 .or-appearance-distress {
     //background: green;
-    .slider.slider-vertical {
+    .slider-vertical .slider {
         height: 210px;
         width: $width / 2;
         border-radius: $width / 4;
@@ -44,7 +44,7 @@ $green: rgb(60, 182, 67);
        
         }
     }
-    .slider.slider-vertical .slider-track {
+    .slider-vertical .slider-track {
         top: 18px;
         border-bottom-left-radius: 0;
         border-bottom-right-radius: 0;
@@ -80,7 +80,7 @@ $green: rgb(60, 182, 67);
 
 // corrections for rtl display
 .or[dir="rtl"] {
-    .slider.slider-vertical .slider-handle {
+    .slider-vertical .slider-handle {
         margin-right: -4.5px;
         margin-left: auto;
     }
-- 
2.2.1

